import{WORDING}from"./wordings";import*as SCALE from"./scales";import*as CHORD from"./chords";import*as TUNING from"./tuning";import*as TAB from"./tab";import*as PARSER from"./parser";import*as TOOLS from"./tools";class Instrument{constructor(t,e,r,o){try{TUNING.isValid(t)&&(this.tuning=PARSER.splitTuning(t)),this.fretNumber=e,this.fretsToDisplay=isNaN(r)?0:r+1,this.maxSpan=isNaN(o)?4:o}catch(t){return console.error(t),!1}return this}getChordInfo(t){let e,r,o=[],n=[],i=[],s={error:"",name:"",tab:t,notes:"",tuning:this.tuning.join(""),formula:""};try{TAB.isValid(t)&&(t=PARSER.splitTab(t))}catch(t){return s.error=t,s}try{for(let n=0;n<t.length;n++)isNaN(t[n])?o.push("x"):(r=this.tuning[n],(e=parseInt(t[n])+SCALE.A.indexOf(r))>SCALE.A.length-1&&(e-=SCALE.A.length),o.push(SCALE.A[e]));s.notes=o.join("")}catch(t){return s.error=WORDING.failedToConvertTabIntoNotes,s}let l=[];try{for(let t=0;t<this.tuning.length;t++)if(l.push({root:"",formula:[]}),o[t]&&"x"!==o[t].toLowerCase())for(let e=0;e<o.length;e++){if(!o[e]||"x"===o[e].toLowerCase())continue;let r=SCALE.A.indexOf(o[e])-SCALE.A.indexOf(o[t]);r<0?r=SCALE.A.length+r:0===r&&(l[t].root=o[e]),l[t].formula.push(r)}}catch(t){s.error=WORDING.failedToCalculateFormula}for(let t=0;t<l.length;t++){if(""===l[t].root)continue;i.push(l[t].root),l[t].formula.sort(function(t,e){return t-e});let e=TOOLS.removeDuplicates(l[t].formula);n.push(e.join("-"))}let a,h,f=[],u=[];try{for(let t=0;t<CHORD.FORMULAS.length;t++){a=CHORD.FORMULAS[t].integer;for(let e=0;e<n.length;e++)h=new RegExp("^"+n[e]+"$","g"),a.match(h)&&i[e]&&(u.push(i[e]+CHORD.FORMULAS[t].suffix),f.push(CHORD.FORMULAS[t].formula))}if(!(f.length>0))throw WORDING.noMatch;if(f.length>1){let t=TOOLS.removeDuplicates(f);s.formula=t}else s.formula=f}catch(t){return s.error=t,s}if(u.length>1){let t=TOOLS.removeDuplicates(u);s.name=t}else s.name=u;return s}getChordsList(t,e,r){r=r||0;let o,n,i,s,l=[],a=[],h={error:"",chordList:[],offset:0};const f={basic:{rootBelow4thFret:!0,noMuteAfterFirstNote:!0,rootIsLowestNote:!0,splittedChord:!1,openString:!0},powerchord:{frettedNotes:[2,3],rootIsLowestNote:!0,rootOnLowestFret:!0,splittedChord:!1,openString:!1},bar:{rootIsLowestNote:!0,rootOnLowestFret:!0,barredString:[3,6],noMuteAfterFirstNote:!0,splittedChord:!1,openString:!1}};try{if("string"!=typeof t)throw WORDING.invalidChordName;i=(t=PARSER.splitChordName(t))[0],o=t[1],l.push(i),s=SCALE.A.indexOf(i),a=(n=TOOLS.searchInObject(CHORD.FORMULAS,o)).integer.split("-")}catch(t){return h.error=WORDING.invalidChordName,h}for(let t=1;t<a.length;t++){let e=parseInt(a[t])+parseInt(s);e>SCALE.A.length-1&&(e-=SCALE.A.length),l.push(SCALE.A[e])}let u,p=[],d=0;for(d=0;d<this.tuning.length;d++){p[d]=[],p[d].push("x");for(let t=0;t<l.length;t++)(u=SCALE.A.indexOf(l[t])-SCALE.A.indexOf(this.tuning[d]))<0&&(u=SCALE.A.length+u),p[d].push(u),u+12<this.fretNumber&&p[d].push(u+12)}let g=[];for(d=0;d<this.tuning.length;d++){let t=g.length;for(let e=0;e<p[d].length;e++)if(g[e])for(let r=0;r<t;r++)if(0===e)g[r].push(p[d][e]);else{let t=g[r].slice(0);t.pop(),t.push(p[d][e]),g.push(t)}else g[e]=[p[d][e]]}let c=[],O=(t,e)=>{for(let r in t){if(!e.hasOwnProperty(r))return!1;if("object"==typeof t[r]){let o=t[r][0],n=t[r][1];if(e[r]<o||e[r]>n)return!1}else if(e[r]!==t[r])return!1}return!0};try{for(let t=r;t<g.length;t++){if(CHORD.isValid(g[t],l,this.tuning)&&TOOLS.arrayFind(g[t],"max")-TOOLS.arrayFind(g[t],"min")<this.maxSpan){let e={openString:!1,frettedNotes:0},r=g[t].join(""),o=/[0-9]+[x]+/gi;/[0-9]+[x]+[0-9]+/gi.test(r)?e.splittedChord=!0:e.splittedChord=!1,o.test(r)?e.noMuteAfterFirstNote=!1:e.noMuteAfterFirstNote=!0;for(let r=0;r<g[t].length;r++){let o=g[t][r];if(!isNaN(o)){let n=o+SCALE.A.indexOf(this.tuning[r]);0===o&&(e.openString=!0),s===n&&(0===e.frettedNotes&&(e.rootIsLowestNote=!0),e.rootBelow4thFret=o<=4,e.rootOnLowestFret=TOOLS.arrayFind(g[t],"min")>=o),(o>0&&r<g[t].length-1&&o===g[t][r-1]||TOOLS.arrayFind(g[t],o)>=3)&&(e.barredString=isNaN(e.barredString)?1:e.barredString+1),e.frettedNotes++}}let n={tab:g[t],tag:[]};Object.getOwnPropertyNames(f).forEach((t,r)=>{O(f[t],e)&&n.tag.indexOf(t)&&n.tag.push(t)}),c.push(n)}if(e>0&&e<g[t].length&&c.length===e){r=t+1;break}}}catch(t){console.error(t)}return h.chordList=c,h.offset=r,h}getChordLayout(t,e){let r,o,n=this.fretsToDisplay;try{r=TAB.isValid(e)?PARSER.splitTab(e):[0,0,0,0,0,0]}catch(t){return!1}let i=[];for(let t=0;t<r.length;t++)!1===isNaN(r[t])&&i.push(r[t]);let s=Math.abs(Math.max.apply(Math,i)),l=Math.abs(Math.min.apply(Math,i)),a=1;s>=n&&(a=l>0?l:1),1===a&&s>5&&(a=s-n+2);try{if(0===n)n=s-a+2;else if(s-a+1>n-1)throw n=s-a+2,WORDING.croppedChordLayout}catch(t){console.error(t)}o='<table class="chord">';for(let t=0;t<n;t++){let e=t+a-1;1===a&&0===t&&(o+="<thead>"),o+=e%2&&e>0?'<tr><th class="fret-number">'+e+"</th>":"<tr><th></th>";for(let e=0;e<this.tuning.length;e++){let n=parseInt(r[e]);o+=0===t?0===n?'<th><div class="dot open"></div></th>':"<th></th>":n===a+t-1?'<td><div class="dot plain">'+r[e]+"</div></td>":"<td></td>"}o+=1===a&&0===t?"<tr></thead>":"</tr>"}return o+='<caption align="bottom">'+t+"</caption>",o+="</table>"}}const isValidTab=TAB.isValid,isValidTuning=TUNING.isValid;export{Instrument,isValidTab,isValidTuning};