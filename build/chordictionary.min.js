/**Chordictionary v0.5.0-beta, @license MIT, (c) 2016 Hubert Fauconnier + contributors*/
(function(window){"use strict";function define(){var WORDING={croppedChordLayout:"Number of frets does not allow full display of the chord.",failedToConvertTabIntoNotes:"Could not convert the tab into notes.",failedToCalculateFormula:"Could not calculate the formulas.",invalidTab:'The tab should only be composed of "x" and numbers from 1 to 9.',invalidTuning:"The tuning doesn't seem right. It should only be composed of 1 or more letters from A to G.",invalidChordName:"The chord name doesn't seem right. A valid chord name could be Amin, C, Gsus4...",noMatch:"The tab didn't match any known chord."};var MDL_A_SCALE=["A","A#","B","C","C#","D","D#","E","F","F#","G","G#"];var MDL_CHORD_FORMULAS=[{formula:"1-3-5",integer:"0-4-7",name:"Major",suffix:""},{formula:"1-5",integer:"0-7",name:"Power chord",suffix:"5"},{formula:"1-4-5",integer:"0-5-7",name:"Suspended fourth",suffix:"sus4"},{formula:"1-2-5",integer:"0-2-7",name:"Suspended second",suffix:"sus2"},{formula:"1-3-5-9",integer:"0-4-7-14",name:"Added ninth",suffix:"add9"},{formula:"1-3-5-6",integer:"0-4-7-9",name:"Major Sixth",suffix:"6"},{formula:"1-3-5-6-9",integer:"0-4-7-9-14",name:"Sixth, added ninth",suffix:"6/9"},{formula:"1-3-5-7",integer:"0-4-7-11",name:"Major seventh",suffix:"maj7"},{formula:"1-3-5-7-9",integer:"0-4-7-11-14",name:"Major ninth",suffix:"maj9"},{formula:"1-3-5-7-#11",integer:"0-4-7-11-18",name:"Major seventh, sharp eleventh",suffix:"maj7#11"},{formula:"1-3-5-7-9-13",integer:"0-4-7-11-14-21",name:"Major thirteen",suffix:"Maj13"},{formula:"1-b3-5",integer:"0-3-7",name:"Minor",suffix:"min"},{formula:"1-b3-5-9",integer:"0-3-7-14",name:"Minor, added ninth",suffix:"m(add9)"},{formula:"1-b3-5-6",integer:"0-3-7-9",name:"Minor sixth",suffix:"m6"},{formula:"1-b3-5-b6",integer:"0-3-7-8",name:"Minor, flat sixth",suffix:"mb6"},{formula:"1-b3-5-6-9",integer:"0-3-7-9-14",name:"Minor sixth, added ninth",suffix:"m6/9"},{formula:"1-b3-5-b7",integer:"0-3-7-10",name:"Minor seventh",suffix:"m7"},{formula:"1-b3-5-7",integer:"0-3-7-11",name:"Minor, major seventh",suffix:"m(maj7)"},{formula:"1-b3-5-b7",integer:"0-3-6-10",name:"Minor seventh, flat fifth",suffix:"m7b5"},{formula:"1-b3-5-b7-9",integer:"0-3-7-10-14",name:"Minor ninth",suffix:"m9"},{formula:"1-b3-5-7-9",integer:"0-3-7-11-14",name:"Minor ninth, major seventh",suffix:"m9(maj7)"},{formula:"1-b3-b5-b7-9",integer:"0-3-7-10-14",name:"Minor eleventh",suffix:"m9b5"},{formula:"1-b3-5-b7-9-11-13",integer:"0-3-7-10-14-17-21",name:"Minor thirteen",suffix:"m13"},{formula:"1-3-5-b7",integer:"0-4-7-10",name:"Dominant seventh",suffix:"7"},{formula:"1-3-5#",integer:"0-4-8",name:"Augmented",suffix:"aug"},{formula:"1-3-b5",integer:"0-4-6",name:"Diminished",suffix:"dim"},{formula:"1",integer:"0",name:"Single note",suffix:""},{formula:"1-3-b7",integer:"0-4-10",name:"Seventh",suffix:"7"},{formula:"1-3-6",integer:"0-4-9",name:"Sixth",suffix:"6"}];var Chordictionary={};Chordictionary.Instrument=function(tuning,fretNumber,fretsToDisplay,maxSpan){try{if(Chordictionary.isValidTuning(tuning))this.tuning=splitTuning(tuning);this.fretNumber=fretNumber;this.fretsToDisplay=!isNaN(fretsToDisplay)?fretsToDisplay+1:0;this.maxSpan=!isNaN(maxSpan)?maxSpan:4}catch(e){console.error(e);return false}return this};Chordictionary.Instrument.prototype.getChordInfo=function(tab){var notes=[],intFormulas=[],roots=[],results={error:"",name:"",tab:tab,notes:"",tuning:this.tuning.join(""),formula:""};try{if(Chordictionary.isValidTab(tab)){var tab=splitTab(tab)}}catch(e){results.error=e;return results}var index,stringRootNote;try{for(var i=0;i<tab.length;i++){if(isNaN(tab[i])){notes.push("x")}else{stringRootNote=this.tuning[i];index=parseInt(tab[i])+MDL_A_SCALE.indexOf(stringRootNote);if(index>MDL_A_SCALE.length-1)index=index-MDL_A_SCALE.length;notes.push(MDL_A_SCALE[index])}}results.notes=notes.join("")}catch(e){results.error=WORDING.failedToConvertTabIntoNotes;return results}var rawFormulas=[];try{for(var i=0;i<this.tuning.length;i++){rawFormulas.push({root:"",formula:[]});if(!notes[i]||notes[i]=="x")continue;for(var j=0;j<notes.length;j++){if(!notes[j]||notes[j]=="x")continue;var interval=MDL_A_SCALE.indexOf(notes[j])-MDL_A_SCALE.indexOf(notes[i]);if(interval<0){interval=MDL_A_SCALE.length+interval}else if(interval==0){rawFormulas[i].root=notes[j]}rawFormulas[i].formula.push(interval)}}}catch(e){results.error=WORDING.failedToCalculateFormula}for(var i=0;i<rawFormulas.length;i++){if(rawFormulas[i].root=="")continue;roots.push(rawFormulas[i].root);rawFormulas[i].formula.sort(function(a,b){return a-b});var unique=removeDuplicates(rawFormulas[i].formula);intFormulas.push(unique.join("-"))}var dictionary,formulas=[],regex,matches=[];try{for(var i=0;i<MDL_CHORD_FORMULAS.length;i++){dictionary=MDL_CHORD_FORMULAS[i].integer;for(var j=0;j<intFormulas.length;j++){regex=new RegExp("^"+intFormulas[j]+"$","g");if(dictionary.match(regex)&&roots[j]){matches.push(roots[j]+MDL_CHORD_FORMULAS[i].suffix);formulas.push(MDL_CHORD_FORMULAS[i].formula)}}}if(formulas.length>0){if(formulas.length>1){var uniqueformulas=removeDuplicates(formulas);results.formula=uniqueformulas}else{results.formula=formulas}}else throw WORDING.noMatch}catch(e){results.error=e;return results}if(matches.length>1){var uniqueMatches=removeDuplicates(matches);results.name=uniqueMatches}else{results.name=matches}return results};Chordictionary.Instrument.prototype.getChordsList=function(chordName,limit,offset){var chordNotes=[],offset=offset||0,results={error:"",chordList:[],offset:0};try{if(typeof chordName==="string"){var chordName=splitChordName(chordName);var rootNote=chordName[0];var chordType=chordName[1];chordNotes.push(rootNote)}else throw WORDING.invalidChordName}catch(e){results.error=e;return results}try{var chordInfo=searchInObject(MDL_CHORD_FORMULAS,chordType);var chordFormula=chordInfo.integer.split("-")}catch(e){results.error=e;return results}for(var i=1;i<chordFormula.length;i++){var index=parseInt(chordFormula[i])+parseInt(MDL_A_SCALE.indexOf(rootNote));if(index>MDL_A_SCALE.length-1)index=index-MDL_A_SCALE.length;chordNotes.push(MDL_A_SCALE[index])}var tabPool=[];var fretPosition;for(var string=0;string<this.tuning.length;string++){tabPool[string]=[];tabPool[string].push("x");for(var note=0;note<chordNotes.length;note++){fretPosition=MDL_A_SCALE.indexOf(chordNotes[note])-MDL_A_SCALE.indexOf(this.tuning[string]);if(fretPosition<0)fretPosition=MDL_A_SCALE.length+fretPosition;tabPool[string].push(fretPosition);if(fretPosition+12<this.fretNumber)tabPool[string].push(fretPosition+12)}}var chordPool=[];for(var string=0;string<this.tuning.length;string++){var chordPoolLength=chordPool.length;for(var i=0;i<tabPool[string].length;i++){if(chordPool[i]){for(var chordIndex=0;chordIndex<chordPoolLength;chordIndex++){if(i===0){chordPool[chordIndex].push(tabPool[string][i])}else{var tempChord=chordPool[chordIndex].slice(0);tempChord.pop();tempChord.push(tabPool[string][i]);chordPool.push(tempChord)}}}else{chordPool[i]=[tabPool[string][i]]}}}var validChords=[];for(var iChord=offset;iChord<chordPool.length;iChord++){var chordAnatomy={rootBelow4thFret:false,rootIsLowestNote:false,rootOnLowestFret:false,noMuteAfterRoot:false,openString:0,barredString:0,frettedNotes:0,splittedChord:false};if(isValidChord(chordPool[iChord],chordNotes,this.tuning)&&arrayFind(chordPool[iChord],"max")-arrayFind(chordPool[iChord],"min")<this.maxSpan){for(var i=0;i<chordPool[iChord].length;i++){if(!isNaN(chordPool[iChord][i])){var noteIndex=chordPool[iChord][i]+MDL_A_SCALE.indexOf(this.tuning[i]);if(MDL_A_SCALE.indexOf(rootNote)==noteIndex){if(chordAnatomy.frettedNotes===0){chordAnatomy.rootIsLowestNote=true;if(chordPool[iChord][i]<=4){chordAnatomy.rootBelow4thFret=true;if(chordPool[iChord].lastIndexOf("x")<i)chordAnatomy.noMuteAfterRoot=true}}if(arrayFind(chordPool[iChord],"min")>=chordPool[iChord][i]){chordAnatomy.rootOnLowestFret=true}}if(chordPool[iChord][i]===0){chordAnatomy.openString++}if(chordPool[iChord][i]>0&&i<chordPool[iChord].length-1&&chordPool[iChord][i]===chordPool[iChord][i-1]||arrayFind(chordPool[iChord],chordPool[iChord][i])>=3){chordAnatomy.barredString++}chordAnatomy.frettedNotes++}else{if(i>0&&i<chordPool[iChord].length-1&&(chordPool[iChord][i+1]!="x"&&chordPool[iChord][i-1]!="x"||chordPool[iChord].lastIndexOf("x")>0&&chordPool[iChord].lastIndexOf("x")<chordPool[iChord].length-1)){chordAnatomy.splittedChord=true}}}try{var chordId=validChords.length;var tags=[];validChords.push({tab:chordPool[iChord],tag:[]});if(chordAnatomy.rootBelow4thFret&&chordAnatomy.noMuteAfterRoot&&chordAnatomy.rootIsLowestNote){if(chordAnatomy.barredString>=1){if(chordAnatomy.rootOnLowestFret){if(tags.indexOf("basic"))tags.push("basic");if(tags.indexOf("bar"))tags.push("bar")}}else if(tags.indexOf("basic"))tags.push("basic")}if(!chordAnatomy.noMuteAfterRoot&&chordAnatomy.frettedNotes<=3&&chordAnatomy.rootIsLowestNote&&chordAnatomy.rootOnLowestFret&&!chordAnatomy.splittedChord&&!chordAnatomy.openString)if(tags.indexOf("powerchord"))tags.push("powerchord");if(chordAnatomy.rootIsLowestNote&&chordAnatomy.rootOnLowestFret&&chordAnatomy.barredString>=1&&!chordAnatomy.splittedChord&&!chordAnatomy.openString)if(tags.indexOf("bar"))tags.push("bar");if(tags.length)validChords[chordId].tag=tags.join(", ")}catch(e){console.error(e)}if(limit>0&&limit<chordPool[iChord].length&&validChords.length>=limit){offset=iChord+1;break}}}results.chordList=validChords;results.offset=offset;return results};Chordictionary.Instrument.prototype.getChordLayout=function(name,tab){var frets,chordLayout,fretsToDisplay=this.fretsToDisplay;try{if(Chordictionary.isValidTab(tab))var frets=splitTab(tab);else var frets=[0,0,0,0,0,0]}catch(e){return false}var notes=[];for(var i=0;i<frets.length;i++){if(isNaN(frets[i])===false)notes.push(frets[i])}var highestFret=Math.abs(Math.max.apply(Math,notes));var lowestFret=Math.abs(Math.min.apply(Math,notes));var base=1;if(highestFret>=fretsToDisplay)base=lowestFret>0?lowestFret:1;if(base===1&&highestFret>5)base=highestFret-fretsToDisplay+2;try{if(fretsToDisplay===0){fretsToDisplay=highestFret-base+2}else if(highestFret-base+1>fretsToDisplay-1){throw WORDING.croppedChordLayout;fretsToDisplay=highestFret-base+2}}catch(e){console.error(e)}chordLayout='<table class="chord">';for(var gtrFret=0;gtrFret<fretsToDisplay;gtrFret++){var fretNumber=gtrFret+base-1;if(base==1&&gtrFret==0)chordLayout+="<thead>";if(fretNumber%2&&fretNumber>0)chordLayout+='<tr><th class="fret-number">'+fretNumber+"</th>";else chordLayout+="<tr><th></th>";for(var gtrString=0;gtrString<this.tuning.length;gtrString++){if(gtrFret==0){if(frets[gtrString]==0)chordLayout+='<th><div class="dot open"></div></th>';else chordLayout+="<th></th>"}else{if(frets[gtrString]==base+gtrFret-1)chordLayout+='<td><div class="dot plain">'+frets[gtrString]+"</div></td>";else chordLayout+="<td></td>"}}if(base==1&&gtrFret==0)chordLayout+="<tr></thead>";else chordLayout+="</tr>"}chordLayout+='<caption align="bottom">'+name+"</caption>";chordLayout+="</table>";return chordLayout};Chordictionary.isValidTab=function(tab){var pattern=new RegExp("^[x0-9]*$","i");if(pattern.test(tab)){return true}else{throw WORDING.invalidTab;return false}};Chordictionary.isValidTuning=function(tuning){var tuning=tuning;var pattern=new RegExp("^[#a-g]+$","i");if(pattern.test(tuning)){return true}else{throw WORDING.invalidTuning;return false}};function isValidChord(tab,chordNotes,tuning){var result,index,notesCount={};for(var iFret=0;iFret<tab.length;iFret++){if(isNaN(tab[iFret]))continue;index=tab[iFret]+MDL_A_SCALE.indexOf(tuning[iFret]);if(index>MDL_A_SCALE.length-1)index=index-MDL_A_SCALE.length;for(var iNote=0;iNote<chordNotes.length;iNote++){if(!notesCount[MDL_A_SCALE[index]])notesCount[MDL_A_SCALE[index]]=1;else if(MDL_A_SCALE[index]==MDL_A_SCALE[iNote])notesCount[MDL_A_SCALE[index]]++}}for(var iNote=0;iNote<chordNotes.length;iNote++){if(chordNotes[iNote]in notesCount)result=true;else{result=false;break}}return result}function splitTab(tab,tuning){var tuning=tuning||"EADGBE";var tabArray=[];try{if(tab.length<=tuning.length)return tab.split("");else if(tab.length==tuning.length*2){for(var i=0;i<tab.length;i++){if(!(i%2))tabArray.push(tab.slice(i,i+2))}return tabArray}else if(tab.length>tuning.length){if(arrayFind(tab.split(""),"max")>1){for(var i=0;i<tab.length;i++){if(tab.charAt(i).search(/[x02-9]/i)!=-1||tab.charAt(i)==1&&tab.charAt(i+1).search(/x/i)!=-1){tabArray.push(tab.slice(i,i+1))}else if(tab.charAt(i+1).search(/x/i)==-1){tabArray.push(tab.slice(i,i+2));i++}}return tabArray}else throw WORDING.invalidTab}}catch(e){return false}}function splitTuning(tuning){var tuningArray=[];var noSharps=new RegExp("^[a-g]+$","i");var containSharps=new RegExp("^[#a-g]+$","i");try{if(noSharps.test(tuning))return tuning.toUpperCase().split("");else if(containSharps.test(tuning)){tuning=tuning.toUpperCase();for(var i=0;i<tuning.length;i++){if(tuning.charAt(i)!="#"){if(tuning.charAt(i+1)!="#")tuningArray.push(tuning.slice(i,i+1));else{tuningArray.push(tuning.slice(i,i+2));i++}}}return tuningArray}else throw WORDING.invalidTuning}catch(e){return false}}function splitChordName(chordName){var root;var quality;try{if(typeof chordName!="string")throw WORDING.invalidChordName;else{var sharp=chordName.search("#");if(sharp==-1){root=chordName.charAt(0);quality=chordName.slice(1)}else{root=chordName.slice(0,2).toUpperCase();quality=chordName.slice(2)}return[root,quality]}return result}catch(e){return false}}function removeDuplicates(arr){try{if(Array.isArray(arr))var arr=arr;else throw arr+" is not an array.";return arr.filter(function(elem,index,self){return index==self.indexOf(elem)})}catch(e){return false}}function searchInObject(obj,keyword){try{if(typeof obj==="object"){var obj=obj;if(typeof keyword=="string")var keyword=keyword.toLowerCase();for(var i=0;i<obj.length;i++){for(var key in obj[i]){if(obj[i][key]==keyword)return obj[i];else if(typeof obj[i][key]=="string"){if(obj[i][key].toLowerCase()==keyword)return obj[i]}}}throw"Couldn't find "+keyword+" in "+obj}else{throw obj+" is not an object."}return false}catch(e){return false}}function arrayFind(arr,what){var result;try{if(Array.isArray(arr))var arr=arr;else throw arr+" is not an array.";if(what)var what=what;else throw"Missing parameter.";switch(what){case"min":result=Math.min.apply(Math,arr);if(!isNaN(result))return result;else{for(var i=0;i<arr.length;i++){if(isNaN(arr[i]))continue;else{if(isNaN(result)){result=arr[i];continue}else{if(arr[i]<result)result=arr[i];else continue}}}}break;case"max":result=Math.max.apply(Math,arr);if(!isNaN(result))return result;else{for(var i=0;i<arr.length;i++){if(isNaN(arr[i]))continue;else{if(isNaN(result)){result=arr[i];continue}else{if(arr[i]>result)result=arr[i];else continue}}}}break;default:result=occurrences(arr.join(""),what);break}}catch(e){return false}return result}function occurrences(string,subString,allowOverlapping){string+="";subString+="";if(subString.length<=0)return string.length+1;var n=0,pos=0,step=allowOverlapping?1:subString.length;while(true){pos=string.indexOf(subString,pos);if(pos>=0){++n;pos+=step}else break}return n}function countOccurences(array){if(Array.isArray(array)){var result={};for(i=0;i<array.length;++i){if(!result[array[i]])result[array[i]]=0;++result[array[i]]}return result}else throw array+" is not an array."}return Chordictionary}if(typeof Chordictionary==="undefined"){window.Chordictionary=define()}else console.error();"Chordictionary is already defined."})(window);